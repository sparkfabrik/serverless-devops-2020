service: apis
frameworkVersion: '2'
plugins:
  - serverless-webpack
provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:AWS_DEFAULT_REGION}
  stage: ${env:STAGE}
  memorySize: 128
  timeout: 30
  environment:
    DYNAMODB_PROFILES_TABLE: ${env:STAGE}-Profiles
    CORS_VALID_ORIGINS: '*'
    ASSETS_BUCKET: profile-assets-${env:STAGE}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'dynamodb:GetItem'
        - 'dynamodb:Query'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource:
        - >-
          arn:aws:dynamodb:${opt:region,self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PROFILES_TABLE}
        - >-
          arn:aws:dynamodb:${opt:region,self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PROFILES_TABLE}/index/*
    - Effect: Allow
      Action:
        - 's3:*'
      Resource:
        - '*'
functions:
  listProfiles:
    description: 'List public profiles'
    handler: apis/listProfiles.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET
    events:
      - http:
          path: profile/list
          method: get
      - http:
          path: profile/list
          method: options
  getProfile:
    description: 'Get public profile'
    handler: apis/getProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET,PUT,DELETE
    events:
      - http:
          path: profile/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
      - http:
          path: profile/{id}
          method: options
          request:
            parameters:
              paths:
                id: true
  createProfile:
    description: 'Create profile'
    handler: apis/createProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,POST
    events:
      - http:
          path: profile
          method: post
      - http:
          path: profile
          method: options
  updateProfile:
    description: 'Update profile'
    handler: apis/updateProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET,PUT,DELETE
    events:
      - http:
          path: profile/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
  deleteProfile:
    description: 'Delete profile'
    handler: apis/deleteProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET,PUT,DELETE
    events:
      - http:
          path: profile/{id}
          method: delete
  getSignedUrl:
    description: 'Get S3 signed url'
    handler: apis/getSignedUrl.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET
    events:
      - http:
          path: get-signed-url
          method: get
      - http:
          path: get-signed-url
          method: options
  processFile:
    description: 'Process uploaded file'
    handler: s3/processFile.handler
    events:
      - s3:
          bucket: ${self:provider.environment.ASSETS_BUCKET}
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv

resources:
  Resources:
    Profiles:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_PROFILES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    Assets:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:provider.environment.ASSETS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"

custom:
  webpack:
    webpackConfig: webpack.config.js
